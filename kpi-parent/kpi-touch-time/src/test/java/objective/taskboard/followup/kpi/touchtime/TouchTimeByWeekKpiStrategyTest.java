package objective.taskboard.followup.kpi.touchtime;

import static objective.taskboard.followup.kpi.properties.KpiTouchTimePropertiesMocker.withTouchTimeConfig;
import static objective.taskboard.followup.kpi.touchtime.helpers.TouchTimeByWeekHelperCalculator.averageEffortByWeekCalculator;

import java.time.ZoneId;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;

import objective.taskboard.followup.ProjectDatesNotConfiguredException;
import objective.taskboard.followup.kpi.KpiLevel;
import objective.taskboard.followup.kpi.enviroment.DSLKpi;
import objective.taskboard.followup.kpi.touchtime.helpers.GenerateTTByWeekDataSetStrategyBehavior;
import objective.taskboard.followup.kpi.touchtime.helpers.TTByWeekKpiDataPointBuilder;

@RunWith(MockitoJUnitRunner.class)
public class TouchTimeByWeekKpiStrategyTest {

    private static final ZoneId ZONE_ID = ZoneId.systemDefault();

    @Test
    public void getDataSet_happyDay_twoWeeks_fourIssues() {
        dsl().environment()
            .withJiraProperties()
                .withSubtaskStatusPriorityOrder("Done","Reviewing","To Review","Doing","To Do","Open")
            .eoJp()
            .withKpiProperties()
                .atFeatureHierarchy("Doing")
                    .withChildrenType("Backend Development")
                    .withChildrenType("Alpha Bug")
                .eoH()
            .eoKP()
            .withKpiProperties(
                withTouchTimeConfig()
                    .withChartStack("Development")
                        .types("Backend Development")
                        .statuses("Doing")
                    .eoS()
                    .withChartStack("Review")
                        .statuses("Reviewing")
                    .eoS()
                .eoTTSC()
            )
            .services()
                .projects()
                    .withKey("TASKB")
                        .startAt("2018-11-12")
                        .deliveredAt("2018-11-26")
                    .eoP()
                .eoPs()
            .eoS()
            .givenSubtask("I-1")
                .project("TASKB")
                .type("Backend Development")
                .withTransitions()
                    .status("Open").date("2018-11-08")
                    .status("To Do").date("2018-11-08")
                    .status("Doing").date("2018-11-10")
                    .status("To Review").date("2018-11-16")
                    .status("Reviewing").date("2018-11-20")
                    .status("Done").date("2018-11-27")
                .eoT()
                .worklogs()
                    .at("2018-11-10").timeSpentInHours(1.0)
                    .at("2018-11-15").timeSpentInHours(2.0)
                    .at("2018-11-19").timeSpentInHours(3.0)
                    .at("2018-11-23").timeSpentInHours(4.0)
                .eoW()
            .eoI()
            .givenSubtask("I-2")
                .project("TASKB")
                .type("Backend Development")
                .withTransitions()
                    .status("Open").date("2018-11-10")
                    .status("To Do").date("2018-11-10")
                    .status("Doing").date("2018-11-13")
                    .status("To Review").date("2018-11-14")
                    .status("Reviewing").date("2018-11-15")
                    .status("Done").date("2018-11-22")
                .eoT()
                .worklogs()
                    .at("2018-11-14").timeSpentInHours(1.0)
                    .at("2018-11-16").timeSpentInHours(2.0)
                    .at("2018-11-20").timeSpentInHours(4.0)
                .eoW()
            .eoI()
            .givenSubtask("I-3")
                .project("TASKB")
                .type("Backend Development")
                .withTransitions()
                    .status("Open").date("2018-11-10")
                    .status("To Do").date("2018-11-10")
                    .status("Doing").date("2018-11-12")
                    .status("To Review").date("2018-11-13")
                    .status("Reviewing").date("2018-11-14")
                    .status("Done").date("2018-11-16")
                .eoT()
                .worklogs()
                    .at("2018-11-12").timeSpentInHours(2.0)
                    .at("2018-11-15").timeSpentInHours(1.0)
                .eoW()
            .eoI()
            .givenSubtask("I-4")
                .project("TASKB")
                .type("Alpha Bug")
                .withTransitions()
                    .status("Open").date("2018-11-18")
                    .status("To Do").date("2018-11-18")
                    .status("Doing").date("2018-11-19")
                    .status("To Review").date("2018-11-21")
                    .status("Reviewing").date("2018-11-22")
                    .status("Done").date("2018-11-24")
                .eoT()
                .worklogs()
                    .at("2018-11-20").timeSpentInHours(2.0)
                    .at("2018-11-23").timeSpentInHours(2.0)
                .eoW()
            .eoI()
        .when()
            .appliesBehavior(new GenerateTTByWeekDataSetStrategyBehavior("TASKB", KpiLevel.SUBTASKS, ZONE_ID))
        .then()
            .hasSize(6)
            .hasPoints(
                point().withDate("2018-11-17").withStackName("Development").withEffortInHours(3.0),
                point().withDate("2018-11-17").withStackName("Review").withNoEffort(),
                point().withDate("2018-11-24").withStackName("Development").withEffortInHours(6.33),
                point().withDate("2018-11-24").withStackName("Review").withEffortInHours(0.66),
                point().withDate("2018-11-26").withStackName("Development").withEffortInHours(10.0),
                point().withDate("2018-11-26").withStackName("Review").withNoEffort());
    }

    @Test
    public void getDataSet_whenChartStackOrderIsStatusThenType_thenHappyPath() {
        dsl().environment()
            .withJiraProperties()
                .withSubtaskStatusPriorityOrder("Done","Reviewing","To Review","Doing","To Do","Open")
            .eoJp()
            .withKpiProperties()
                .atFeatureHierarchy("Doing")
                    .withChildrenType("Backend Development")
                    .withChildrenType("Alpha Bug")
                    .withChildrenType("Subtask Review")
                .eoH()
            .eoKP()
            .withKpiProperties(
                withTouchTimeConfig()
                    .withChartStack("Development")
                        .statuses("Doing")
                        .statuses("Reviewing")
                    .eoS()
                    .withChartStack("Review")
                        .types("Subtask Review")
                    .eoS()
                .eoTTSC()
            )
            .services()
                .projects()
                    .withKey("TASKB")
                        .startAt("2018-11-04")
                        .deliveredAt("2018-11-26")
                    .eoP()
                .eoPs()
            .eoS()
            .givenSubtask("I-1")
                .project("TASKB")
                .type("Backend Development")
                .withTransitions()
                    .status("Open").date("2018-11-08")
                    .status("To Do").date("2018-11-08")
                    .status("Doing").date("2018-11-10")
                    .status("To Review").date("2018-11-16")
                    .status("Reviewing").date("2018-11-20")
                    .status("Done").date("2018-11-27")
                .eoT()
                .worklogs()
                    .at("2018-11-10").timeSpentInHours(2.0)
                    .at("2018-11-15").timeSpentInHours(3.0)
                    .at("2018-11-19").timeSpentInHours(5.0)
                    .at("2018-11-23").timeSpentInHours(7.0)
                .eoW()
            .eoI()
            .givenSubtask("I-2")
                .project("TASKB")
                .type("Backend Development")
                .withTransitions()
                    .status("Open").date("2018-11-10")
                    .status("To Do").date("2018-11-10")
                    .status("Doing").date("2018-11-13")
                    .status("To Review").date("2018-11-14")
                    .status("Reviewing").date("2018-11-15")
                    .status("Done").date("2018-11-22")
                .eoT()
                .worklogs()
                    .at("2018-11-14").timeSpentInHours(11.0)
                    .at("2018-11-16").timeSpentInHours(13.0)
                    .at("2018-11-20").timeSpentInHours(17.0)
                .eoW()
            .eoI()
            .givenSubtask("I-3")
                .project("TASKB")
                .type("Backend Development")
                .withTransitions()
                    .status("Open").date("2018-11-10")
                    .status("To Do").date("2018-11-10")
                    .status("Doing").date("2018-11-12")
                    .status("To Review").date("2018-11-13")
                    .status("Reviewing").date("2018-11-14")
                    .status("Done").date("2018-11-16")
                .eoT()
                .worklogs()
                    .at("2018-11-12").timeSpentInHours(19.0)
                    .at("2018-11-15").timeSpentInHours(23.0)
                .eoW()
            .eoI()
            .givenSubtask("I-4")
                .project("TASKB")
                .type("Subtask Review")
                .withTransitions()
                    .status("Open").date("2018-11-18")
                    .status("To Do").date("2018-11-18")
                    .status("Doing").date("2018-11-19")
                    .status("To Review").date("2018-11-21")
                    .status("Reviewing").date("2018-11-22")
                    .status("Done").date("2018-11-24")
                .eoT()
                .worklogs()
                    .at("2018-11-20").timeSpentInHours(29.0)
                    .at("2018-11-23").timeSpentInHours(31.0)
                .eoW()
            .eoI()
        .when()
            .appliesBehavior(new GenerateTTByWeekDataSetStrategyBehavior("TASKB", KpiLevel.SUBTASKS, ZONE_ID))
        .then()
            .hasSize(8)
            .hasPoints(
                point()
                    .withDate("2018-11-10")
                    .withStackName("Development")
                    .withEffortInHours(averageEffortByWeekCalculator()
                            .addEffortByStatus(2.0)
                            .totalSelectedIssuesInWeek(1)
                            .calculate()),
                point()
                    .withDate("2018-11-10")
                    .withStackName("Review")
                    .withNoEffort(),
                point()
                    .withDate("2018-11-17")
                    .withStackName("Development")
                    .withEffortInHours(averageEffortByWeekCalculator()
                            .addEffortByStatus(5.0)
                            .addEffortByStatus(24.0)
                            .addEffortByStatus(42.0)
                            .totalSelectedIssuesInWeek(3)
                            .calculate()),
                point()
                    .withDate("2018-11-17")
                    .withStackName("Review")
                    .withNoEffort(),
                point()
                    .withDate("2018-11-24")
                    .withStackName("Development")
                    .withEffortInHours(averageEffortByWeekCalculator()
                            .addEffortByStatus(17.0)
                            .addEffortByStatus(41.0)
                            .totalSelectedIssuesInWeek(3)
                            .calculate()),
                point()
                    .withDate("2018-11-24")
                    .withStackName("Review")
                    .withEffortInHours(averageEffortByWeekCalculator()
                            .addEffortByType(60.0)
                            .totalSelectedIssuesInWeek(3)
                            .calculate()),
                point()
                    .withDate("2018-11-26")
                    .withStackName("Development")
                    .withEffortInHours(averageEffortByWeekCalculator()
                            .addEffortByStatus(17.0)
                            .totalSelectedIssuesInWeek(1)
                            .calculate()),
                point()
                    .withDate("2018-11-26")
                    .withStackName("Review")
                    .withNoEffort());
    }

    @Test
    public void getDataSet_restrictingByTimeLine() {
        dsl().environment()
            .withJiraProperties()
                .withSubtaskStatusPriorityOrder("Done","Reviewing","To Review","Doing","To Do","Open")
            .eoJp()
            .withKpiProperties()
                .atFeatureHierarchy("Doing")
                    .withChildrenType("Backend Development")
                    .withChildrenType("Alpha Bug")
                .eoH()
            .eoKP()
            .withKpiProperties(
                withTouchTimeConfig()
                    .withChartStack("Development")
                        .types("Backend Development")
                        .statuses("Doing")
                    .eoS()
                    .withChartStack("Review")
                        .statuses("Reviewing")
                    .eoS()
                .eoTTSC()
            )
            .services()
                .projects()
                    .withKey("TASKB")
                        .startAt("2018-11-12")
                        .deliveredAt("2018-11-16")
                    .eoP()
                .eoPs()
            .eoS()
            .givenSubtask("I-1")
                .project("TASKB")
                .type("Backend Development")
                .withTransitions()
                    .status("Open").date("2018-11-08")
                    .status("To Do").date("2018-11-08")
                    .status("Doing").date("2018-11-10")
                    .status("To Review").date("2018-11-16")
                    .status("Reviewing").date("2018-11-20")
                    .status("Done").date("2018-11-27")
                .eoT()
                .worklogs()
                    .at("2018-11-10").timeSpentInHours(1.0)
                    .at("2018-11-15").timeSpentInHours(2.0)
                    .at("2018-11-19").timeSpentInHours(3.0)
                    .at("2018-11-23").timeSpentInHours(4.0)
                .eoW()
            .eoI()
            .givenSubtask("I-2")
                .project("TASKB")
                .type("Backend Development")
                .withTransitions()
                    .status("Open").date("2018-11-10")
                    .status("To Do").date("2018-11-10")
                    .status("Doing").date("2018-11-13")
                    .status("To Review").date("2018-11-14")
                    .status("Reviewing").date("2018-11-15")
                    .status("Done").date("2018-11-22")
                .eoT()
                .worklogs()
                    .at("2018-11-14").timeSpentInHours(1.0)
                    .at("2018-11-16").timeSpentInHours(2.0)
                    .at("2018-11-20").timeSpentInHours(4.0)
                .eoW()
            .eoI()
            .givenSubtask("I-3")
                .project("TASKB")
                .type("Backend Development")
                .withTransitions()
                    .status("Open").date("2018-11-10")
                    .status("To Do").date("2018-11-10")
                    .status("Doing").date("2018-11-12")
                    .status("To Review").date("2018-11-13")
                    .status("Reviewing").date("2018-11-14")
                    .status("Done").date("2018-11-16")
                .eoT()
                .worklogs()
                    .at("2018-11-12").timeSpentInHours(2.0)
                    .at("2018-11-15").timeSpentInHours(1.0)
                .eoW()
            .eoI()
            .givenSubtask("I-4")
                .project("TASKB")
                .type("Alpha Bug")
                .withTransitions()
                    .status("Open").date("2018-11-18")
                    .status("To Do").date("2018-11-18")
                    .status("Doing").date("2018-11-19")
                    .status("To Review").date("2018-11-21")
                    .status("Reviewing").date("2018-11-22")
                    .status("Done").date("2018-11-24")
                .eoT()
                .worklogs()
                    .at("2018-11-20").timeSpentInHours(2.0)
                    .at("2018-11-23").timeSpentInHours(2.0)
                .eoW()
            .eoI()
        .when()
            .appliesBehavior(new GenerateTTByWeekDataSetStrategyBehavior("TASKB", KpiLevel.SUBTASKS, ZONE_ID))
        .then()
            .hasSize(2)
            .hasPoints(
                point().withDate("2018-11-16").withStackName("Development").withEffortInHours(3.0),
                point().withDate("2018-11-16").withStackName("Review").withNoEffort());
    }

    @Test
    public void getDataSet_whenLevelFeature_thenHappyPath() {
        dsl().environment()
            .services()
                .projects()
                    .withKey("TASKB")
                        .startAt("2019-01-01")
                        .deliveredAt("2019-01-31")
                    .eoP()
                .eoPs()
            .eoS()
            .withJiraProperties()
                .withFeaturesStatusPriorityOrder("Done","Doing","To Do","Planning","To Plan","Open")
            .eoJp()
            .withKpiProperties()
                .atFeatureHierarchy("Planning")
                    .withChildrenType("Tech Analysis")
                .eoH()
                .atFeatureHierarchy("Doing")
                    .withChildrenType("Backend Development")
                .eoH()
            .eoKP()
            .withKpiProperties(
                    withTouchTimeConfig()
            )
            .givenFeature("I-1")
                .project("TASKB")
                .type("Task")
                .withTransitions()
                    .status("Open").date("2019-01-02")
                    .status("To Plan").date("2019-01-02")
                    .status("Planning").date("2019-01-02")
                    .status("To Do").date("2019-01-02")
                    .status("Doing").date("2019-01-02")
                    .status("Done").date("2019-01-03")
                .eoT()
                .subtask("I-2")
                    .type("Tech Analysis")
                    .withTransitions()
                        .status("Open").date("2019-01-02")
                        .status("To Do").date("2019-01-02")
                        .status("Doing").date("2019-01-02")
                        .status("Done").date("2019-01-02")
                    .eoT()
                    .worklogs()
                        .at("2019-01-02").timeSpentInHours(8.0)
                    .eoW()
                .endOfSubtask()
                .subtask("I-3")
                    .type("Backend Development")
                    .withTransitions()
                        .status("Open").date("2019-01-02")
                        .status("To Do").date("2019-01-02")
                        .status("Doing").date("2019-01-03")
                        .status("Done").date("2019-01-03")
                    .eoT()
                    .worklogs()
                        .at("2019-01-03").timeSpentInHours(4.0)
                    .eoW()
                .endOfSubtask()
            .eoI()
        .when()
            .appliesBehavior(new GenerateTTByWeekDataSetStrategyBehavior("TASKB", KpiLevel.FEATURES, ZONE_ID))
        .then()
            .hasSize(10)
            .hasPoints(
                point().withDate("2018-12-30").withStackName("Planning").withEffortInHours(8.0),
                point().withDate("2018-12-30").withStackName("Doing").withEffortInHours(4.0),
                point().withDate("2019-01-06").withStackName("Planning").withNoEffort(),
                point().withDate("2019-01-06").withStackName("Doing").withNoEffort(),
                point().withDate("2019-01-13").withStackName("Planning").withNoEffort(),
                point().withDate("2019-01-13").withStackName("Doing").withNoEffort(),
                point().withDate("2019-01-20").withStackName("Planning").withNoEffort(),
                point().withDate("2019-01-20").withStackName("Doing").withNoEffort(),
                point().withDate("2019-01-27").withStackName("Planning").withNoEffort(),
                point().withDate("2019-01-27").withStackName("Doing").withNoEffort());
    }

    @Test
    public void getDataSet_whenNoProgressingStatusConfiguredAndRequestFeatureLevel_thenShouldReturnEmptyDataset() {
        dsl().environment()
            .services()
                .projects()
                    .withKey("TASKB")
                        .startAt("2019-01-01")
                        .deliveredAt("2019-01-31")
                    .eoP()
                .eoPs()
            .eoS()
            .withJiraProperties()
                .withFeaturesStatusPriorityOrder("Done","Doing","To Do","Planning","To Plan","Open")
            .eoJp()
            .withKpiProperties(
                    withTouchTimeConfig()
                        .withNoProgressingStatusesConfigured()
            )
            .givenFeature("I-1")
                .project("TASKB")
                .type("Task")
                .withTransitions()
                    .status("Open").date("2019-01-02")
                    .status("To Plan").date("2019-01-02")
                    .status("Planning").date("2019-01-02")
                    .status("To Do").date("2019-01-02")
                    .status("Doing").date("2019-01-02")
                    .status("Done").date("2019-01-03")
                .eoT()
                .subtask("I-2")
                    .type("Tech Analysis")
                    .withTransitions()
                        .status("Open").date("2019-01-02")
                        .status("To Do").date("2019-01-02")
                        .status("Doing").date("2019-01-02")
                        .status("Done").date("2019-01-02")
                    .eoT()
                    .worklogs()
                        .at("2019-01-02").timeSpentInHours(8.0)
                    .eoW()
                .endOfSubtask()
                .subtask("I-3")
                    .type("Backend Development")
                    .withTransitions()
                        .status("Open").date("2019-01-02")
                        .status("To Do").date("2019-01-02")
                        .status("Doing").date("2019-01-03")
                        .status("Done").date("2019-01-03")
                    .eoT()
                    .worklogs()
                        .at("2019-01-03").timeSpentInHours(4.0)
                    .eoW()
                .endOfSubtask()
            .eoI()
        .when()
            .appliesBehavior(new GenerateTTByWeekDataSetStrategyBehavior("TASKB", KpiLevel.FEATURES, ZONE_ID))
        .then()
            .emptyDataSet();
    }

    @Test
    public void getDataSet_whenNoIssuesReturnedFromService_thenShouldReturnEmptyDataSet() {
        dsl().environment()
            .withJiraProperties()
                .withSubtaskStatusPriorityOrder("Done","Reviewing","To Review","Doing","To Do","Open")
            .eoJp()
            .withKpiProperties()
                .atFeatureHierarchy("Doing")
                    .withChildrenType("Backend Development")
                    .withChildrenType("Alpha Bug")
                .eoH()
            .eoKP()
            .withKpiProperties(
                withTouchTimeConfig()
                    .withChartStack("Development")
                        .types("Backend Development")
                        .statuses("Doing")
                    .eoS()
                    .withChartStack("Review")
                        .statuses("Reviewing")
                    .eoS()
                .eoTTSC()
            )
            .services()
                .projects()
                    .withKey("TASKB")
                        .startAt("2018-11-12")
                        .deliveredAt("2018-11-26")
                    .eoP()
                .eoPs()
            .eoS()
        .when()
            .appliesBehavior(new GenerateTTByWeekDataSetStrategyBehavior("TASKB", KpiLevel.SUBTASKS, ZONE_ID))
        .then()
            .emptyDataSet();
    }

    @Test
    public void getDataSet_whenProjectRangeUnconfigured_thenShouldThrowProjectDatesNotConfigured() {
        dsl().environment()
            .services()
                .projects()
                    .withKey("TASKB")
                    .eoP()
                .eoPs()
            .eoS()
            .withJiraProperties()
                .withFeaturesStatusPriorityOrder("Done","Doing","To Do","Planning","To Plan","Open")
            .eoJp()
            .withKpiProperties()
                .atFeatureHierarchy("Planning")
                    .withChildrenType("Tech Analysis")
                .eoH()
                .atFeatureHierarchy("Doing")
                    .withChildrenType("Backend Development")
                .eoH()
            .eoKP()
            .givenFeature("I-1")
                .project("TASKB")
                .type("Task")
                .withTransitions()
                    .status("Open").date("2019-01-02")
                    .status("To Plan").date("2019-01-02")
                    .status("Planning").date("2019-01-02")
                    .status("To Do").date("2019-01-02")
                    .status("Doing").date("2019-01-02")
                    .status("Done").date("2019-01-03")
                .eoT()
                .subtask("I-2")
                    .type("Tech Analysis")
                    .withTransitions()
                        .status("Open").date("2019-01-02")
                        .status("To Do").date("2019-01-02")
                        .status("Doing").date("2019-01-02")
                        .status("Done").date("2019-01-02")
                    .eoT()
                    .worklogs()
                        .at("2019-01-02").timeSpentInHours(8.0)
                    .eoW()
                .endOfSubtask()
                .subtask("I-3")
                    .type("Backend Development")
                    .withTransitions()
                        .status("Open").date("2019-01-02")
                        .status("To Do").date("2019-01-02")
                        .status("Doing").date("2019-01-03")
                        .status("Done").date("2019-01-03")
                    .eoT()
                    .worklogs()
                        .at("2019-01-03").timeSpentInHours(4.0)
                    .eoW()
                .endOfSubtask()
            .eoI()
        .when()
            .expectExceptionFromBehavior(new GenerateTTByWeekDataSetStrategyBehavior("TASKB", KpiLevel.FEATURES, ZONE_ID))
        .then()
            .isFromException(ProjectDatesNotConfiguredException.class);
    }

    @Test
    public void projectWithWrongRangeConfigured_noStartDate() {
        dsl().environment()
            .services()
                .projects()
                    .withKey("TASKB")
                        .deliveredAt("2019-01-15")
                    .eoP()
                .eoPs()
            .eoS()
            .withJiraProperties()
                .withFeaturesStatusPriorityOrder("Done","Doing","To Do","Planning","To Plan","Open")
            .eoJp()
            .withKpiProperties()
                .atFeatureHierarchy("Planning")
                    .withChildrenType("Tech Analysis")
                .eoH()
                .atFeatureHierarchy("Doing")
                    .withChildrenType("Backend Development")
                .eoH()
            .eoKP()
            .givenFeature("I-1")
                .project("TASKB")
                .type("Task")
                .withTransitions()
                    .status("Open").date("2019-01-02")
                    .status("To Plan").date("2019-01-02")
                    .status("Planning").date("2019-01-02")
                    .status("To Do").date("2019-01-02")
                    .status("Doing").date("2019-01-02")
                    .status("Done").date("2019-01-03")
                .eoT()
                .subtask("I-2")
                    .type("Tech Analysis")
                    .withTransitions()
                        .status("Open").date("2019-01-02")
                        .status("To Do").date("2019-01-02")
                        .status("Doing").date("2019-01-02")
                        .status("Done").date("2019-01-02")
                    .eoT()
                    .worklogs()
                        .at("2019-01-02").timeSpentInHours(8.0)
                    .eoW()
                .endOfSubtask()
                .subtask("I-3")
                    .type("Backend Development")
                    .withTransitions()
                        .status("Open").date("2019-01-02")
                        .status("To Do").date("2019-01-02")
                        .status("Doing").date("2019-01-03")
                        .status("Done").date("2019-01-03")
                    .eoT()
                    .worklogs()
                        .at("2019-01-03").timeSpentInHours(4.0)
                    .eoW()
                .endOfSubtask()
            .eoI()
        .when()
            .expectExceptionFromBehavior(new GenerateTTByWeekDataSetStrategyBehavior("TASKB", KpiLevel.FEATURES, ZONE_ID))
        .then()
            .isFromException(ProjectDatesNotConfiguredException.class);
    }

    @Test
    public void projectWithWrongRangeConfigured_noDeliveryDate() {
        dsl().environment()
            .services()
                .projects()
                    .withKey("TASKB")
                        .startAt("2019-01-15")
                    .eoP()
                .eoPs()
            .eoS()
            .withJiraProperties()
                .withFeaturesStatusPriorityOrder("Done","Doing","To Do","Planning","To Plan","Open")
            .eoJp()
            .withKpiProperties()
                .atFeatureHierarchy("Planning")
                    .withChildrenType("Tech Analysis")
                .eoH()
                .atFeatureHierarchy("Doing")
                    .withChildrenType("Backend Development")
                .eoH()
            .eoKP()
            .givenFeature("I-1")
                .project("TASKB")
                .type("Task")
                .withTransitions()
                    .status("Open").date("2019-01-02")
                    .status("To Plan").date("2019-01-02")
                    .status("Planning").date("2019-01-02")
                    .status("To Do").date("2019-01-02")
                    .status("Doing").date("2019-01-02")
                    .status("Done").date("2019-01-03")
                .eoT()
                .subtask("I-2")
                    .type("Tech Analysis")
                    .withTransitions()
                        .status("Open").date("2019-01-02")
                        .status("To Do").date("2019-01-02")
                        .status("Doing").date("2019-01-02")
                        .status("Done").date("2019-01-02")
                    .eoT()
                    .worklogs()
                        .at("2019-01-02").timeSpentInHours(8.0)
                    .eoW()
                .endOfSubtask()
                .subtask("I-3")
                    .type("Backend Development")
                    .withTransitions()
                        .status("Open").date("2019-01-02")
                        .status("To Do").date("2019-01-02")
                        .status("Doing").date("2019-01-03")
                        .status("Done").date("2019-01-03")
                    .eoT()
                    .worklogs()
                        .at("2019-01-03").timeSpentInHours(4.0)
                    .eoW()
                .endOfSubtask()
            .eoI()
        .when()
            .expectExceptionFromBehavior(new GenerateTTByWeekDataSetStrategyBehavior("TASKB", KpiLevel.FEATURES, ZONE_ID))
        .then()
            .isFromException(ProjectDatesNotConfiguredException.class);
    }

    private TTByWeekKpiDataPointBuilder point() {
        return new TTByWeekKpiDataPointBuilder();
    }

    private DSLKpi dsl() {
        DSLKpi dsl = new DSLKpi();
        dsl.environment()
            .types()
                .addFeatures("Task")
                .addSubtasks("Backend Development", "Alpha Bug", "Tech Analysis", "Subtask Review")
            .eoT()
            .statuses()
                .withNotProgressingStatuses("Open", "To Plan", "To Do", "To Review", "Done")
                .withProgressingStatuses("Planning", "Doing", "Reviewing")
            .eoS()
            .withTimezone(ZONE_ID);
        return dsl;
    }

}
